/**
 * @file main.cpp
 * @remarks uSonicTimer
 * @author Kevin Murphy (https://www.SomerledDesign.com)
 * @brief modifying an old, inexpensive Ultrasonic cleaner to include heating and timing
 * @version 1.0
 * @date 06/16/24
 *
 * @copyright Copyright (c) 2024 Somerled Design, LLC in Kevin Murphy
 *
 *                      GNU GENERAL PUBLIC LICENSE
 *   This program is free software : you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 *   This code is currently maintained for and compiled with Arduino 1.8.x.
 *   Your mileage may vary with other versions.
 *
 *   ATTENTION: LIBRARY FILES MUST BE PUT IN LIBRARIES DIRECTORIES AND NOT THE INO SKETCH DIRECTORY !!!!
 *
 *   FOR EXAMPLE:
 *   tiny4kOLED.h, tiny4kOLED.cpp ------------------------>   \Arduino\Sketchbook\libraries\tiny4kOLED\
 *
 *   Version History -
 *
 *   .100 - 01/16/22 - A work in progress
 *   .200 - 01/29/22 - rewrite with u8g2lib as display driver
 *
 *
 * DISCLAIMER:
 *   With this design, including both the hardware & software I offer no guarantee that it is bug
 *   free or reliable. So, if you decide to build one and you have problems or issues and/or causes
 *   damage/harm to you, others or property then you are on your own. This work is experimental.
 *
 */

#include <Arduino.h>
#include <inttypes.h>

#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>

#ifndef ESP8266
  #include <Clickencoder.h>
  #include <TimerOne.h>
#else
  #include "ESPRotary.h"
  #include "Ticker.h"
  #include "Button2.h"
#endif

#define TEMP_OFFSET 10.0 // offset to turn off heater before it gets to setTemperature

#include <OneWire.h>
#include <DallasTemperature.h>
/*
 *  ---Available I/O---
 *   •   GPIO0     D3
 *   •   GPIO1     D10 (TX) \
 *   •   GPIO3     D9  (RX)  |  If using as inputs don't call Serial.begin()
 *
 *   •   GPIO2     D4  (SCL)   \
 *                               - I2C
 *   •   GPIO4     D2  (SDA)   /
 *
 *   •   GPIO5     D1
 *
 *   ○   GPIO12    D6  (MISO) | \
 *   •   GPIO13    D7  (MOSI) |    S
 *   •   GPIO14    D5  (SCLK) |     P
 *   •   GPIO15    D8  (CS)   | /    I
 *   •   GPIO16    D0  (no interrupt)
 *   •   ADC0      A0  (Analog Input)
 *
 */
/*
 *  Required I/O:
 *    SPI Nokia 5110
 *      Func          Non i/o     Digitial     GPIO i/o     ESP12e Pin         Descr.
 *     =====================================================================================
 *    1 RESET          RST        D3           GPIO0       1
 *    2 CS                        D8(CS)       GPIO15      16
 *    3 D/C                       D10/TX       GPIO1       22
 *    4 DIN                       D7(MOSI)     GPIO13      7
 *    5 CLK                       D5(SCLK)     GPIO14      5
 *    6 VCC            3V
 *    7 BL                        D4           GPIO2       17                 Backlight PWM
 *    8 GND
 *
 *    Rotary Encoder
 *      Func          Non i/o     Digitial     GPIO i/o     ESP12e Pin               Descr.
 *     =====================================================================================
 *      ROT_ENC_A_PIN             D9           GPIO3       21
 *      ROT_ENC_B_PIN             A0           ADC0        2
 *      ROT_ENC_BUTTON_PIN        D3           GPIO0       18
 *
 *    Relays
 *      Func          Non i/o     Digitial     GPIO i/o     ESP12e Pin         Descr.
 *     =====================================================================================
 *      HEATER_ENABLE_PIN         D2           GPIO4       19
 *      DEVICE_ENABLE_PIN         D1           GPIO5       20
 *
 *    Dallas Temp Sensor (DS18B20)
 *      Func          Non i/o     Digitial     GPIO i/o     ESP12e Pin         Descr.
 *     =====================================================================================
 *      ONE_WIRE_BUS              D0           GPIO0        18
 */

// Pin definitions
#define ONE_WIRE_BUS D0      // DS18B20 Data/Control
#define DEVICE_ENABLE_PIN D1 // Best for Relay control
#define HEATER_ENABLE_PIN D2 // Best for Relay control
#define BUTTON_PIN D3        // Pin for Encoder Button
#define BACKLIGHT_PIN  D4    // Pin for LCD Backlight

// #define SERIAL_SPEED 115200

// -------------------------------------------------------------------------
//  NOKIA 5110 LCD
#define sclk_pin D5
#define din_pin D7
#define dc_pin D0
#define cs_pin D8
#define rst_pin -1 // as in the Adafruit header... physically conn to RST switch
Adafruit_PCD8544 display = Adafruit_PCD8544(sclk_pin, din_pin, dc_pin, cs_pin, rst_pin);

// Adafruit_PCD8544 display = Adafruit_PCD8544(D2, D1, D6, D7, D8);

// -------------------------------------------------------------------------
//  Rotary Encoder
// ESPRotary rotaryEncoder(ROT_ENC_A_PIN, ROT_ENC_B_PIN);

#define ROT_ENC_A_PIN D9      // CLK
#define ROT_ENC_B_PIN A0      // SW
#define ROT_ENC_BUTTON_PIN D3 // DT

#define CLICKS_PER_STEP 4

/////////////////////////////////////////////////////////////////
#ifndef ESP8266
Clickencoder m;
#else
ESPRotary encoder;
Ticker ticker;
Button2 button;
#endif
/////////////////////////////////////////////////////////////////

// Temperature sensor
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

// Global variables
int presetTimes[] = {3, 8, 10, 15, 20, 30, 60}; // Preset times in minutes
int currentPresetIndex = 0;
unsigned long countdownMillis = 0;
bool timerRunning = false;
float setTemperature = 25.0;
float currentTemperature = 0.0;

// Function prototypes
void updateDisplay();
void turnBacklightOn();
void turnBacklightOff();
void handleRotaryEncoder();
void handleButtonPress();
void handleLoop();
void startTimer();
void stopTimer();
void updateTemperature();
void handleRotaryEncoder();
void handleButtonPress();
void rotate();
void showDirection();

void setup()
{
  
  // Serial.begin(SERIAL_SPEED);
  // delay(50);
  
  // -------------------------------------------------------------------------
  //  NON OBJECT Pin Initialization
  pinMode(BACKLIGHT_PIN, OUTPUT);     // Backlight on LCD
  pinMode(DEVICE_ENABLE_PIN, OUTPUT); // uSonic ON
  pinMode(HEATER_ENABLE_PIN, OUTPUT); // Water Heater ON

  turnBacklightOn();


  // -------------------------------------------------------------------------
  //  ENCODER Initialization
  encoder.begin(ROT_ENC_A_PIN, ROT_ENC_B_PIN, CLICKS_PER_STEP);
  encoder.setChangedHandler(rotate);
  encoder.setLeftRotationHandler(showDirection);
  encoder.setRightRotationHandler(showDirection);

  // -------------------------------------------------------------------------
  //  BUTTON Initialization (encoder button)
  button.begin(BUTTON_PIN);


  // -------------------------------------------------------------------------
  //  LCD Initialization
  display.begin();
  display.setContrast(60);
  display.clearDisplay();

  // -------------------------------------------------------------------------
  //  TIMER INTERRRUPT Initialization
  ticker.attach_ms(10, handleLoop);

  // pinMode(ROT_ENC_BUTTON_PIN, INPUT_PULLUP);  

  // Initialize temperature sensor
  sensors.begin();

  // Display Splash Screen
  // displayFlash();
}

void loop()
{
  // Display initial Menu
  updateDisplay();

  handleRotaryEncoder();

  if (digitalRead(ROT_ENC_BUTTON_PIN) == LOW)
  {
    delay(50); // debounce delay
    if (digitalRead(ROT_ENC_BUTTON_PIN) == LOW)
    {
      handleButtonPress();
      while (digitalRead(ROT_ENC_BUTTON_PIN) == LOW)
        ; // wait for button release
    }
  }

  if (timerRunning)
  {
    if (millis() >= countdownMillis)
    {
      stopTimer();
    }
  }

  updateTemperature();
  updateDisplay();
  delay(200); // update interval
}

void rotate(ESPRotary &encoder)
{
  Serial.println(encoder.getPosition());
}

// on left or right rotation
void showDirection(ESPRotary &encoder)
{
  Serial.println(encoder.directionToString(encoder.getDirection()));
}

void updateDisplay()
{
  display.clearDisplay();
  display.setCursor(0, 0);
  display.setTextSize(1);
  display.setTextColor(BLACK);

  if (timerRunning)
  {
    unsigned long remainingMillis = countdownMillis - millis();
    unsigned int remainingSeconds = remainingMillis / 1000;
    unsigned int minutes = remainingSeconds / 60;
    unsigned int seconds = remainingSeconds % 60;
    display.printf("Time: %02d:%02d\n", minutes, seconds);
  }
  else
  {
    display.println("Select Time:");
    display.printf("%d min\n", presetTimes[currentPresetIndex]);
  }

  display.printf("Set Temp: %.1fC\n", setTemperature);
  display.printf("Curr Temp: %.1fC\n", currentTemperature);

  display.display();
}

void handleRotaryEncoder()
{
  static long lastPosition = -1;
  long newPosition = encoder.read();

  if (newPosition != lastPosition)
  {
    lastPosition = newPosition;

    if (!timerRunning)
    {
      if (newPosition > lastPosition)
      {
        currentPresetIndex = (currentPresetIndex + 1) % (sizeof(presetTimes) / sizeof(presetTimes[0]));
      }
      else
      {
        currentPresetIndex = (currentPresetIndex - 1 + (sizeof(presetTimes) / sizeof(presetTimes[0]))) % (sizeof(presetTimes) / sizeof(presetTimes[0]));
      }
      updateDisplay();
    }
  }
}

void handleButtonPress()
{
  if (!timerRunning)
  {
    startTimer();
  }
  else
  {
    stopTimer();
  }
}

void handleLoop()
{
  encoder.loop();
}

void startTimer()
{
  countdownMillis = millis() + presetTimes[currentPresetIndex] * 60000;
  timerRunning = true;
  digitalWrite(DEVICE_ENABLE_PIN, HIGH);
}

void stopTimer()
{
  timerRunning = false;
  digitalWrite(DEVICE_ENABLE_PIN, LOW);
  digitalWrite(HEATER_ENABLE_PIN, LOW);
}

void updateTemperature()
{
  sensors.requestTemperatures();
  currentTemperature = sensors.getTempCByIndex(0);

  if ((currentTemperature + TEMP_OFFSET) < setTemperature)
  {
    digitalWrite(HEATER_ENABLE_PIN, HIGH);
  }
  else
  {
    digitalWrite(HEATER_ENABLE_PIN, LOW);
  }
}

// Button2 Handlers
void longClick(Button2& btn) {
    Serial.println("long click\n");
}
void doubleClick(Button2& btn) {
    Serial.println("double click\n");
}
void tripleClick(Button2& btn) {
    Serial.println("triple click\n");
    Serial.println(btn.getNumberOfClicks());
}
void tap(Button2& btn) {
    Serial.println("tap");
}